import BN from "bn.js";
export declare function getReserveInfo(symbol: string): {
    asset: string;
    oracleAddress: string;
    priceAddress: string;
    switchboardFeedAddress: string;
    address: string;
    collateralMintAddress: string;
    collateralSupplyAddress: string;
    liquidityAddress: string;
    liquidityFeeReceiverAddress: string;
    userSupplyCap?: undefined;
    name: string;
    symbol: string;
    decimals: number;
    mintAddress: string;
} | {
    asset: string;
    oracleAddress: string;
    priceAddress: string;
    switchboardFeedAddress: string;
    address: string;
    collateralMintAddress: string;
    collateralSupplyAddress: string;
    liquidityAddress: string;
    liquidityFeeReceiverAddress: string;
    userSupplyCap: number;
    name: string;
    symbol: string;
    decimals: number;
    mintAddress: string;
};
export declare const U64_MAX = "18446744073709551615";
export declare const WAD: BN;
export declare class BNumber {
    significand: string;
    precision: number;
    constructor(significand: string | number, precision?: number);
    isZero(): boolean;
    isNan(): boolean;
    toString(): string;
    toHuman(): string;
    neg(): BNumber;
    isGreaterThanOrEqualTo(value: BNumber): boolean;
    isGreaterThan(value: BNumber): boolean;
    isEqualTo(value: BNumber): boolean;
    isLessThanOrEqualTo(value: BNumber): boolean;
    isLessThan(value: BNumber): boolean;
    add(addend: BNumber): BNumber;
    subtract(subtrahend: BNumber): BNumber;
    multiply(multiplier: BNumber): BNumber;
    divideBy(divisor: BNumber): BNumber;
    max(value: BNumber): BNumber;
    min(value: BNumber): BNumber;
    fromWads(): BNumber;
    fromRays(): BNumber;
    fromWangs(): BNumber;
}
export declare const BWAD: BNumber;
export declare const BRAY: BNumber;
export declare const BWANG: BNumber;
export declare const BNaN: BNumber;
export declare const BZero: BNumber;
export declare function getTokenInfo(symbol: string): {
    name: string;
    symbol: string;
    decimals: number;
    mintAddress: string;
};
export declare function toHuman(amount: string, symbol: string): string;
export declare function toBaseUnit(amount: string, symbol: string): string;
export declare function getDecimals(symbol: string): number;
export declare function cTokenToToken(supplyAmount: string, totalLiquidityWads: string, mintSupplyWads: string, decimals: number): string;
export declare function tokenToCToken(supplyAmount: string, totalLiquidityWads: string, mintSupplyWads: string, decimals: number): string;
export declare function getBorrowedAmountWadsWithInterest(reserveCumulativeBorrowRateWads: string, obligationCumulativeBorrowRateWads: string, obligationBorrowAmount: string, decimals: number): string;
export declare function concatZeros(value: string, numZeroes: number): string;
export declare function add(addend1: BNumber, addend2: BNumber): BNumber;
export declare function subtract(minuend1: BNumber, minuend2: BNumber): BNumber;
export declare function multiply(multiplicand: BNumber, multiplier: BNumber): BNumber;
export declare function divide(dividend: BNumber, divisor: BNumber): BNumber;
export declare function min(...args: Array<BNumber>): BNumber;
export declare function max(...args: Array<BNumber>): BNumber;
export declare function neg(val: BNumber): BNumber;
export declare function safeToString(arg: number | string): string;
